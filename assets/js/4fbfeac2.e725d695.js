"use strict";(self.webpackChunkudea_so=self.webpackChunkudea_so||[]).push([[268],{4199:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=n(4848),i=n(8453);n(3012);const a={sidebar_position:1,label:"Sincronizaci\xf3n",Description:"Tutorial sobre sincronizaci\xf3n"},l="Sincronizaci\xf3n",o={id:"laboratorio/tutoriales/hilos/sincronizacion",title:"Sincronizaci\xf3n",description:"* Identificar una condici\xf3n de competencia y los mecanismos existentes para evitarla.",source:"@site/docs/laboratorio/tutoriales/hilos/sincronizacion.md",sourceDirName:"laboratorio/tutoriales/hilos",slug:"/laboratorio/tutoriales/hilos/sincronizacion",permalink:"/udea-so/docs/laboratorio/tutoriales/hilos/sincronizacion",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,label:"Sincronizaci\xf3n",Description:"Tutorial sobre sincronizaci\xf3n"},sidebar:"laboratorioSidebar",previous:{title:"Hilos",permalink:"/udea-so/docs/laboratorio/tutoriales/hilos/threads"}},c={},d=[{value:"1. Comunicaci\xf3n entre Procesos/Hilos a trav\xe9s de memoria compartida.",id:"1-comunicaci\xf3n-entre-procesoshilos-a-trav\xe9s-de-memoria-compartida",level:2},{value:"2. Comunicaci\xf3n entre Hilos",id:"2-comunicaci\xf3n-entre-hilos",level:2},{value:"2.1. Condici\xf3n de competencia",id:"21-condici\xf3n-de-competencia",level:3},{value:"Preguntas",id:"preguntas",level:4},{value:"2.2. Mutex",id:"22-mutex",level:3},{value:"Preguntas",id:"preguntas-1",level:4},{value:"2.3. Sem\xe1foros",id:"23-sem\xe1foros",level:3},{value:"2.3.1. Operaciones con sem\xe1foros",id:"231-operaciones-con-sem\xe1foros",level:3},{value:"Funci\xf3n <code>sem_wait</code>",id:"funci\xf3n-sem_wait",level:4},{value:"Funci\xf3n <code>sem_trywait</code>",id:"funci\xf3n-sem_trywait",level:4},{value:"Funci\xf3n <code>sem_post</code>",id:"funci\xf3n-sem_post",level:4},{value:"Funci\xf3n <code>sem_getvalue</code>",id:"funci\xf3n-sem_getvalue",level:4},{value:"2.3.2. Operaciones para sem\xe1foros anonimo (sin nombre)",id:"232-operaciones-para-sem\xe1foros-anonimo-sin-nombre",level:3},{value:"Funci\xf3n <code>sem_init</code>",id:"funci\xf3n-sem_init",level:4},{value:"Funci\xf3n <code>sem_destroy</code>",id:"funci\xf3n-sem_destroy",level:4},{value:"2.3.3. Operaciones para sem\xe1foros con nombre",id:"233-operaciones-para-sem\xe1foros-con-nombre",level:3},{value:"Funci\xf3n <code>sem_open</code>",id:"funci\xf3n-sem_open",level:4},{value:"Funci\xf3n <code>sem_close</code>",id:"funci\xf3n-sem_close",level:4},{value:"Funci\xf3n <code>sem_unlink</code>",id:"funci\xf3n-sem_unlink",level:4},{value:"2.3.4. Ejemplos de uso de sem\xe1foro con hilos",id:"234-ejemplos-de-uso-de-sem\xe1foro-con-hilos",level:3},{value:"Ejemplo 1",id:"ejemplo-1",level:4},{value:"Ejemplo 2",id:"ejemplo-2",level:4},{value:"3. Comunicaci\xf3n entre procesos",id:"3-comunicaci\xf3n-entre-procesos",level:2},{value:"3.1. Memoria compartida en procesos",id:"31-memoria-compartida-en-procesos",level:3},{value:"C\xf3digo del servidor",id:"c\xf3digo-del-servidor",level:4},{value:"C\xf3digo del cliente",id:"c\xf3digo-del-cliente",level:4},{value:"4. Creaci\xf3n y uso de sem\xe1foros con procesos",id:"4-creaci\xf3n-y-uso-de-sem\xe1foros-con-procesos",level:2},{value:"4.1. Sem\xe1foros con nombre",id:"41-sem\xe1foros-con-nombre",level:3},{value:"Codigo del productor",id:"codigo-del-productor",level:4},{value:"Codigo del consumidor",id:"codigo-del-consumidor",level:4},{value:"4.2. Sem\xe1foros sin nombre",id:"42-sem\xe1foros-sin-nombre",level:3},{value:"Ejemplo",id:"ejemplo",level:4},{value:"5. Ejercicios propuestos",id:"5-ejercicios-propuestos",level:2}];function t(e){const s={a:"a",admonition:"admonition",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",math:"math",mfrac:"mfrac",mi:"mi",mn:"mn",mo:"mo",mover:"mover",mrow:"mrow",msqrt:"msqrt",msub:"msub",msup:"msup",munderover:"munderover",ol:"ol",p:"p",path:"path",pre:"pre",semantics:"semantics",span:"span",strong:"strong",svg:"svg",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"sincronizaci\xf3n",children:"Sincronizaci\xf3n"}),"\n",(0,r.jsx)(s.admonition,{title:"Objetivos",type:"tip",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Identificar una condici\xf3n de competencia y los mecanismos existentes para evitarla."}),"\n",(0,r.jsx)(s.li,{children:"Comprender y hacer uso de mutex y sem\xe1foros para evitar problemas de concurrencia."}),"\n",(0,r.jsx)(s.li,{children:"Explorar el uso de la t\xe9cnica de memoria compartida para comunicaci\xf3n entre procesos e hilos."}),"\n"]})}),"\n",(0,r.jsx)(s.h2,{id:"1-comunicaci\xf3n-entre-procesoshilos-a-trav\xe9s-de-memoria-compartida",children:"1. Comunicaci\xf3n entre Procesos/Hilos a trav\xe9s de memoria compartida."}),"\n",(0,r.jsx)(s.p,{children:"Para el desarrollo de aplicaciones cooperativas usando t\xe9cnicas de multiprogramaci\xf3n y multihilo, es necesario poseer herramientas con las cuales se facilite una comunicaci\xf3n efectiva entre los diferentes entes de procesamiento existentes en una m\xe1quina (hilos o procesos). Para fecilitar esto, el sistema operativo posee un conjunto de opciones de comunicaci\xf3n que incluye las tuber\xedas, los sockets, el paso de mensajes y la memoria compartida."}),"\n",(0,r.jsxs)(s.p,{children:["La t\xe9cnica de comunicaci\xf3n a trav\xe9s de memoria compartida es una de las m\xe1s usadas actualmente debido a su facilidad en la implementaci\xf3n y la simpleza en su funcionamiento. Cuando estamos hablando estrictamente de hilos, ellos por definici\xf3n comparten una serie de recursos del proceso, entre los que se encuentran los espacios de memoria ",(0,r.jsx)(s.strong,{children:"heap"})," y ",(0,r.jsx)(s.strong,{children:"global"})," que act\xfaan como una regi\xf3n de memoria compartida que permite la comunicaci\xf3n entre hilos."]}),"\n",(0,r.jsx)(s.p,{children:"Para los procesos la situaci\xf3n cambia, ya que \xe9stos no poseen a priori, ning\xfan espacio de memoria compartido, por lo que se hace necesaria la intervenci\xf3n del sistema operativo para asignar un espacio de memoria que sea visible por los procesos que se desean comunicar."}),"\n",(0,r.jsx)(s.p,{children:"En ambos casos tras la definici\xf3n de un espacio de memoria se hace necesario sincronizar el acceso a la misma, pues se puede presentar una condici\xf3n de competencia que altere el buen funcionamiento de la aplicaci\xf3n (para profundizar en este concepto rem\xedtase al material de clase o al cap\xedtulo 2 del libro de Tanenbaum)."}),"\n",(0,r.jsx)(s.h2,{id:"2-comunicaci\xf3n-entre-hilos",children:"2. Comunicaci\xf3n entre Hilos"}),"\n",(0,r.jsx)(s.p,{children:"En la clase de sistemas operativos se abord\xf3 el uso de sem\xe1foros como mecanismo de sincronizaci\xf3n entre procesos e hilos. Debido a que el concepto de sem\xe1foro se aplica de manera similar en procesos e hilos, se ha decidido mostrar el funcionamiento solo para estos \xfaltimos y se deja al estudiante la tarea de verificar el funcionamiento en procesos. A continuaci\xf3n realizaremos algunos ejemplos acerca del uso de esta t\xe9cnica."}),"\n",(0,r.jsx)(s.h3,{id:"21-condici\xf3n-de-competencia",children:"2.1. Condici\xf3n de competencia"}),"\n",(0,r.jsx)(s.p,{children:"En el siguiente ejemplo se tienen m\xfaltiples hilos que acceden a una posici\xf3n de memoria compartida. Se espera entonces que se configure una condici\xf3n de competencia. Este es el c\xf3digo:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",metastring:"showLineNumbers",children:'#include <stdio.h>\r\n#include <pthread.h>\r\n#define NUMTHREADS 200\r\n#define MAXCNT 10000\r\n\r\n/* Global variables - shared between threads */\r\ndouble counter = 0;\r\n/* Declaring functions*/\r\nvoid* counting(void *);\r\n\r\nint main(void) {\r\n  pthread_t tid[NUMTHREADS];\r\n  int i=0;\r\n \r\n  for( i=0; i<NUMTHREADS; i++){\r\n     pthread_create (&tid[i], NULL, &counting, NULL);\r\n  }\r\n \r\n  for( i=0; i< NUMTHREADS; i++){\r\n     pthread_join(tid[i], NULL);\r\n  }\r\n \r\n  printf("\\nCounter must be in: %d\\n", MAXCNT*NUMTHREADS);\r\n  printf("\\nCounter value is: %.0f\\n\\n", counter);\r\n\r\n  return 0;\r\n}\r\n\r\n/* Function Thread*/\r\nvoid* counting(void * unused) {\r\n  int i=0;\r\n  for(i=0; i<MAXCNT; i++)\r\n     // highlight-start  \r\n     counter++;\r\n     // highlight-end  \r\n  return NULL;\r\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Una ",(0,r.jsx)(s.strong,{children:"condici\xf3n de competencia"})," se de cuando varios hilos intentan acceder a la vez a un recurso compartido sin una politica de sincronizacion adecuada. Para facilitar la comprensi\xf3n de lo que sucede cuando ",(0,r.jsx)(s.strong,{children:"condici\xf3n de competencia"})," se muestra la siguiente figura:"]}),"\n",(0,r.jsx)("p",{align:"center",children:(0,r.jsx)("figure",{children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.img,{alt:"portada",src:n(9311).A+"",width:"1148",height:"638"}),"\r\n",(0,r.jsxs)("figcaption",{children:[(0,r.jsx)(s.strong,{children:"Fig 1"}),". Condici\xf3n de competencia (",(0,r.jsx)(s.a,{href:"https://bigdata-guide.blogspot.com/2014/01/what-is-race-condition.html",children:"link"}),")"]})]})})}),"\n",(0,r.jsxs)(s.p,{children:["Suponiendo que en c\xf3digo anterior se empleen dos hilos (",(0,r.jsx)(s.code,{children:"Thread A"})," y ",(0,r.jsx)(s.code,{children:"Thread B"}),", como se muestra en la gr\xe1fica), se puede observar que el recurso compartido al cual accede cada hilo (a traves de la funci\xf3n ",(0,r.jsx)(s.code,{children:"counting"}),") es la variable contador (",(0,r.jsx)(s.code,{children:"counter"}),")."]}),"\n",(0,r.jsxs)(s.p,{children:["Como el acceso a ",(0,r.jsx)(s.code,{children:"counter"})," no esta sincronizado el valor de esta variable no se puede predecir por lo que puede no ser el esperado lo cual se puede ver ya que el acceso a ",(0,r.jsx)(s.code,{children:"counter"})," por parte del segundo hilo no se da despu\xe9s de que el primer hilo actualiza (escribe) su valor en memoria si no antes de modo que, el valor del ",(0,r.jsx)(s.code,{children:"counter"})," definitivo no ser\xe1 ",(0,r.jsx)(s.code,{children:"19"})," como se esperar\xeda tras los dos incrementos (uno por cada hilo) sino ",(0,r.jsx)(s.code,{children:"18"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"preguntas",children:"Preguntas"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Ejecute este c\xf3digo en varias oportunidades, verifique que se presente una condici\xf3n de competencia. \xbfC\xf3mo se presenta en pantalla esta condici\xf3n de competencia? \xbfCu\xe1l es el motivo del problema?"}),"\n",(0,r.jsx)(s.li,{children:"\xbfCu\xe1l es la regi\xf3n cr\xedtica para este programa? \xbfCu\xe1les son las posiciones de memoria compartida que generan el problema?"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"22-mutex",children:"2.2. Mutex"}),"\n",(0,r.jsxs)(s.p,{children:["La soluci\xf3n para asegurar el buen funcionamiento del c\xf3digo del ejercicio anterior es permitir que solo uno de los hilos se encuentre en la regi\xf3n cr\xedtica (parte asociada al recurso compartido). En la librer\xeda ",(0,r.jsx)(s.code,{children:"pthread"})," el mecanismo para asegurar sincronizaci\xf3n entre hilos se conoce como ",(0,r.jsx)(s.code,{children:"mutex"})," (Abreviaci\xf3n de ",(0,r.jsx)(s.strong,{children:"Mutual Exclusion"}),"). La siguiente figura ilustra el concepto:"]}),"\n",(0,r.jsx)("p",{align:"center",children:(0,r.jsx)("figure",{children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.img,{alt:"mutex",src:n(6667).A+"",width:"501",height:"218"}),"\r\n",(0,r.jsxs)("figcaption",{children:[(0,r.jsx)(s.strong,{children:"Fig 2"}),". Secci\xf3n critica y mutex"]})]})})}),"\n",(0,r.jsxs)(s.p,{children:["Para crear un ",(0,r.jsx)(s.code,{children:"mutex"}),", se debe crear la variable ",(0,r.jsx)(s.code,{children:"pthread_mutex_t"})," y luego llamar la funci\xf3n ",(0,r.jsx)(s.code,{children:"pthread_mutex_init"})," para inicializarlo.  La parte relacionada con los hilos no cambia, se usan de la misma manera las funciones t\xedpicas (",(0,r.jsx)(s.code,{children:"pthread_start()"}),", ",(0,r.jsx)(s.code,{children:"pthread_join()"}),", etc); lo \xfanico que cambia es que en la tarea (funci\xf3n ",(0,r.jsx)(s.code,{children:"counting"})," para el caso) ejecutada por cada hilo se deber\xe1 ",(0,r.jsx)(s.strong,{children:"asegurar la regi\xf3n cr\xedtica empleando mutex"}),", eso es todo. Para asegurar la secci\xf3n cr\xedtica se emplea la funci\xf3n ",(0,r.jsx)(s.code,{children:"pthread_mutex_lock"}),", la cual una vez invocada proteger\xe1 la regi\xf3n cr\xedtica evitando que otros hilos accedan a esta. Una vez que el c\xf3digo dentro de la regi\xf3n cr\xedtica se ha ejecutado, se procede a invocar la funci\xf3n ",(0,r.jsx)(s.code,{children:"pthread_mutex_unlock"})," para liberar el ",(0,r.jsx)(s.code,{children:"mutex"})," de modo que los dem\xe1s hilos puedan competir nuevamente por el acceso a la regi\xf3n cr\xedtica. La siguiente figura muestra el efecto de asegurar y liberar el ",(0,r.jsx)(s.code,{children:"mutex"})," (en este caso la variable ",(0,r.jsx)(s.code,{children:"lock"}),") para controlar el acceso a la regi\xf3n cr\xedtica:"]}),"\n",(0,r.jsx)("p",{align:"center",children:(0,r.jsx)("figure",{children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.img,{alt:"mutex",src:n(4960).A+"",width:"407",height:"213"}),"\r\n",(0,r.jsxs)("figcaption",{children:[(0,r.jsx)(s.strong,{children:"Fig 3"}),". Acceso a la regi\xf3n critica usando un ",(0,r.jsx)(s.code,{children:"mutex"})]})]})})}),"\n",(0,r.jsxs)(s.p,{children:["A continuaci\xf3n se presenta el ejemplo c\xf3digo del ejemplo anterior modificado. En este se hace uso de un ",(0,r.jsx)(s.code,{children:"mutex"})," la facilitar la sincronizaci\xf3n entre hilos:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",metastring:"showLineNumbers",children:'#include <stdio.h>\r\n#include <pthread.h>\r\n#define NUMTHREADS 200\r\n#define MAXCNT 10000\r\n\r\n/* Global variables - shared between threads */\r\ndouble counter = 0;\r\npthread_mutex_t lock;\r\n\r\n/* Declaring functions*/\r\nvoid* counting(void *);\r\n\r\nint main(void) {\r\n  pthread_t tid[NUMTHREADS];\r\n  int i=0;\r\n\r\n  /* mutex init*/\r\n  if (pthread_mutex_init(&lock, NULL) != 0) {\r\n    printf("\\n mutex init failed\\n");\r\n    return 1;\r\n  }\r\n\r\n  for( i=0; i<NUMTHREADS; i++) {\r\n    pthread_create (&tid[i], NULL, &counting, NULL);\r\n  }\r\n\r\n  for( i=0; i< NUMTHREADS; i++) {\r\n    pthread_join(tid[i], NULL);\r\n  }\r\n  /* mutex destroy*/\r\n  pthread_mutex_destroy(&lock);\r\n\r\n  printf("\\nCounter must be in: %d\\n", MAXCNT*NUMTHREADS);\r\n  printf("\\nCounter value is: %.0f\\n\\n", counter);\r\n  return 0;\r\n}\r\n\r\n/* Function Thread*/\r\nvoid* counting(void * unused) {\r\n  int i=0;\r\n  for(i=0; i<MAXCNT; i++){\r\n    // highlight-start\r\n    pthread_mutex_lock(&lock);\r\n    counter++;\r\n    pthread_mutex_unlock(&lock);\r\n    // highlight-end\r\n  }\r\n  return NULL;\r\n}\n'})}),"\n",(0,r.jsx)(s.h4,{id:"preguntas-1",children:"Preguntas"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"\xbfCu\xe1l es la diferencia entre el c\xf3digo del ejerci\xf3 anterior y el presente?"}),"\n",(0,r.jsx)(s.li,{children:"\xbfSeg\xfan el tema de la clase cu\xe1l es principio de funcionamiento de este c\xf3digo?"}),"\n",(0,r.jsx)(s.li,{children:"Ejecute en varias ocasiones este c\xf3digo. \xbfSe presenta alguna condici\xf3n de competencia?"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"23-sem\xe1foros",children:"2.3. Sem\xe1foros"}),"\n",(0,r.jsx)(s.p,{children:"To Do... Dar una breve descripci\xf3n sobre los semaforos."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://preshing.com/20150316/semaphores-are-surprisingly-versatile/",children:"https://preshing.com/20150316/semaphores-are-surprisingly-versatile/"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.csl.mtu.edu/cs4411.choi/www/Resource/Semaphore.pdf",children:"https://www.csl.mtu.edu/cs4411.choi/www/Resource/Semaphore.pdf"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.csl.mtu.edu/cs4411.choi/www/",children:"https://www.csl.mtu.edu/cs4411.choi/www/"})}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Para el uso de los sem\xe1foros se requiere incluir la librer\xeda ",(0,r.jsx)(s.code,{children:"semaphore.h"}),". Un sem\xe1foro es representado por la variable ",(0,r.jsx)(s.code,{children:"sem_t"}),". A continuaci\xf3n se listan operaciones que se pueden hacer con los sem\xe1foros y la forma de inicializarlos y eliminarlos dependiendo del tipo de sem\xe1foro."]}),"\n",(0,r.jsx)(s.h3,{id:"231-operaciones-con-sem\xe1foros",children:"2.3.1. Operaciones con sem\xe1foros"}),"\n",(0,r.jsxs)(s.h4,{id:"funci\xf3n-sem_wait",children:["Funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_wait"})]}),"\n",(0,r.jsxs)(s.p,{children:["La funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_wait"})," disminuye (bloquea) el valor del sem\xe1foro. Si el valor del sem\xe1foro es mayor que cero, este disminuye en uno y la funci\xf3n retorna inmediatamente. Si el valor del sem\xe1foro es cero, la funci\xf3n se bloquea (espera) hasta que el valor del sem\xe1foro sea mayor que cero y la decrementaci\xf3n pueda realizarse."]}),"\n",(0,r.jsxs)(s.admonition,{title:"sem_wait",type:"info",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Sintaxis"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:"int sem_wait(sem_t *sem);\n"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Par\xe1metros de la funci\xf3n"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"sem"})}),": Un puntero al objeto sem\xe1foro"]}),"\n"]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Retorna"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"0"})}),": si el contador fue disminuido."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"-1"})}),": En caso de error"]}),"\n"]})]}),"\n",(0,r.jsxs)(s.h4,{id:"funci\xf3n-sem_trywait",children:["Funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_trywait"})]}),"\n",(0,r.jsxs)(s.p,{children:["La funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_trywait"})," se utiliza para intentar decrementar (bloquear) un sem\xe1foro sin bloquearse si el sem\xe1foro no est\xe1 disponible. A diferencia de ",(0,r.jsx)(s.code,{children:"sem_wait"}),", que bloquea hasta que el sem\xe1foro est\xe9 disponible, ",(0,r.jsx)(s.code,{children:"sem_trywait"})," retorna inmediatamente, ya sea que haya podido o no decrementar el sem\xe1foro. En el caso de esta funci\xf3n, si el valor del sem\xe1foro es mayor que cero, se procede a llevar a cabo el decremento y la funci\xf3n retorna inmediatamente. Si el valor del sem\xe1foro es cero, la funci\xf3n no se bloquea y retorna un valor indicando que no pudo decrementar el sem\xe1foro."]}),"\n",(0,r.jsxs)(s.admonition,{title:"sem_trywait",type:"info",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Sintaxis"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:"int sem_trywait(sem_t *sem);\n"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Par\xe1metros de la funci\xf3n"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"sem"})}),": Un puntero al objeto sem\xe1foro"]}),"\n"]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Retorna"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"0"})}),": si el contador fue disminuido."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"-1"})}),": En caso de fallo."]}),"\n"]})]}),"\n",(0,r.jsxs)(s.h4,{id:"funci\xf3n-sem_post",children:["Funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_post"})]}),"\n",(0,r.jsxs)(s.p,{children:["La funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_post"})," incrementa (desbloquea) el sem\xe1foro."]}),"\n",(0,r.jsxs)(s.admonition,{title:"sem_post",type:"info",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Sintaxis"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:"int sem_post(sem_t *sem);\n"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Par\xe1metros de la funci\xf3n"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"sem"})}),": Un puntero al objeto sem\xe1foro"]}),"\n"]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Retorna"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"0"})}),": si el contador fue disminuido."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"-1"})}),": En caso de error"]}),"\n"]})]}),"\n",(0,r.jsxs)(s.h4,{id:"funci\xf3n-sem_getvalue",children:["Funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_getvalue"})]}),"\n",(0,r.jsxs)(s.p,{children:["La funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_getvalue"})," se utiliza para obtener el valor actual de un semaforo."]}),"\n",(0,r.jsxs)(s.admonition,{title:"sem_getvalue",type:"info",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Sintaxis"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:"int sem_getvalue(sem_t *sem, int *val);\n"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Par\xe1metros de la funci\xf3n"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"sem"})}),": Apuntador al objeto sem\xe1foro."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"val"})}),": Apuntador a un entero donde se almacenar\xe1 el valor actual del sem\xe1foro."]}),"\n"]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Retorna"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"0"})}),": si valor es copiado con \xe9xito."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"-1"})}),": En caso de error"]}),"\n"]})]}),"\n",(0,r.jsx)(s.h3,{id:"232-operaciones-para-sem\xe1foros-anonimo-sin-nombre",children:"2.3.2. Operaciones para sem\xe1foros anonimo (sin nombre)"}),"\n",(0,r.jsxs)(s.h4,{id:"funci\xf3n-sem_init",children:["Funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_init"})]}),"\n",(0,r.jsxs)(s.p,{children:["La funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_init"})," se utiliza para inicializar un sem\xe1foro anonimo."]}),"\n",(0,r.jsxs)(s.admonition,{title:"sem_init",type:"info",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Sintaxis"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:"int sem_init(sem_t *sem, int pshared, unsigned int val);\n"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Par\xe1metros de la funci\xf3n"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"sem"})}),": Apuntador al sem\xe1foro que se va a inicializar."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"pshared"})}),": Un entero que indica si el sem\xe1foro es compartido entre procesos o entre hilos del mismo proceso. Si ",(0,r.jsx)(s.code,{children:"pshared"})," es ",(0,r.jsx)(s.code,{children:"0"}),", el sem\xe1foro es compartido entre hilos del mismo proceso; si no,  el sem\xe1foro es compartido entre procesos (lo cual requiere que el sem\xe1foro est\xe9 en una regi\xf3n de memoria compartida)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"val"})}),": El valor inicial del sem\xe1foro."]}),"\n"]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Retorna"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"0"})}),": si valor es copiado con \xe9xito."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"-1"})}),": En caso de error"]}),"\n"]})]}),"\n",(0,r.jsxs)(s.h4,{id:"funci\xf3n-sem_destroy",children:["Funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_destroy"})]}),"\n",(0,r.jsxs)(s.p,{children:["La funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_destroy"})," Libera el sem\xe1foro. Esta funci\xf3n debe ser llamada cuando el sem\xe1foro ya no es necesario, (generalmente despu\xe9s de que todos los hilos o procesos han terminado de utilizarlo). Es importante asegurarse de que no haya hilos esperando en el sem\xe1foro cuando se llama a sem_destroy, pues cuando esto no se cumple, la funci\xf3n retorna un mensaje de error."]}),"\n",(0,r.jsxs)(s.admonition,{title:"sem_destroy",type:"info",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Sintaxis"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:"int sem_destroy(sem_t *sem);\n"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Par\xe1metros de la funci\xf3n"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"sem"})}),": Apuntador al sem\xe1foro que se va a inicializar."]}),"\n"]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Retorna"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"0"})}),": si valor es copiado con \xe9xito."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"-1"})}),": En caso de error"]}),"\n"]})]}),"\n",(0,r.jsx)(s.h3,{id:"233-operaciones-para-sem\xe1foros-con-nombre",children:"2.3.3. Operaciones para sem\xe1foros con nombre"}),"\n",(0,r.jsxs)(s.h4,{id:"funci\xf3n-sem_open",children:["Funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_open"})]}),"\n",(0,r.jsxs)(s.p,{children:["La funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_open"})," se utiliza para crear o abrir un sem\xe1foro con nombre. Estos sem\xe1foros permiten la sincronizaci\xf3n entre procesos no relacionados mediante el uso de un nombre \xfanico en el sistema de archivos."]}),"\n",(0,r.jsxs)(s.admonition,{title:"sem_open",type:"info",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Sintaxis"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:"sem_t *sem_open(const char *name, int oflag, mode_t mode, unsigned int value);\n"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Par\xe1metros de la funci\xf3n"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"name"})}),": El nombre del sem\xe1foro. Debe comenzar con una barra ",(0,r.jsx)(s.code,{children:"/"})," y ser una cadena \xfanica en el sistema de archivos."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"oflag"})}),": Modos de apertura que pueden incluir:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"O_CREAT"})}),": Crear el sem\xe1foro si no existe."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"O_EXCL"})}),": Usado junto con ",(0,r.jsx)(s.code,{children:"O_CREAT"})," (esto es ",(0,r.jsx)(s.code,{children:"O_CREAT | O_EXECL"}),"), crea el sem\xe1foro en caso de no existir y falla si este ya existe."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Parametros adicionales"}),": Solo se requieren si se usa ",(0,r.jsx)(s.code,{children:"O_CREAT"}),". Incluyen:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"mode"})}),": Permisos del sem\xe1foro (por ejemplo, ",(0,r.jsx)(s.code,{children:"0644"}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"value"})}),": Valor inicial del sem\xe1foro."]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Retorna"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["En caso de exito retorna un puntero al objeto ",(0,r.jsx)(s.code,{children:"sem_t"})," que representa el sem\xe1foro."]}),"\n",(0,r.jsxs)(s.li,{children:["En caso de fallo, retorna ",(0,r.jsx)(s.code,{children:"SEM_FAILED"}),", y ",(0,r.jsx)(s.code,{children:"errno"})," se establece para indicar el error."]}),"\n"]})]}),"\n",(0,r.jsxs)(s.h4,{id:"funci\xf3n-sem_close",children:["Funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_close"})]}),"\n",(0,r.jsxs)(s.p,{children:["La funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_close"})," se utiliza para cerrar un sem\xe1foro con nombre que ha sido previamente abierto con ",(0,r.jsx)(s.code,{children:"sem_open"}),". Esta funci\xf3n no destruye el sem\xe1foro ni lo elimina del sistema de archivos; simplemente cierra el descriptor del sem\xe1foro en el proceso que llama a la funci\xf3n."]}),"\n",(0,r.jsxs)(s.admonition,{title:"sem_close",type:"info",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Sintaxis"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:"int sem_close(sem_t *sem);;\n"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Par\xe1metros de la funci\xf3n"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"sem"})}),": Apuntador al objeto sem\xe1foro que se va a cerrar."]}),"\n"]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Retorna"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"0"})}),": exito, semaforo liberado"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"-1"})}),": en caso de error."]}),"\n"]})]}),"\n",(0,r.jsxs)(s.h4,{id:"funci\xf3n-sem_unlink",children:["Funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_unlink"})]}),"\n",(0,r.jsx)(s.p,{children:"Elimina el sem\xe1foro con nombre, si otros procesos est\xe1n usando el sem\xe1foro, se pospone la eliminaci\xf3n."}),"\n",(0,r.jsxs)(s.p,{children:["La funci\xf3n ",(0,r.jsx)(s.code,{children:"sem_unlink"})," se usa para eliminar un sem\xe1foro con nombre del sistema. Si otros procesos est\xe1n usando el sem\xe1foro, se pospone la eliminaci\xf3n hasta que todos los procesos cierren el semaforo."]}),"\n",(0,r.jsxs)(s.admonition,{title:"sem_unlink",type:"info",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Sintaxis"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:"int sem_unlink(const char *name);\n"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Par\xe1metros de la funci\xf3n"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"name"})}),": Nombre del sem\xe1foro que se va a eliminar. Este debe ser el mismo nombre empleado cuando se uso ",(0,r.jsx)(s.code,{children:"sem_open"}),"."]}),"\n"]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Retorna"}),":"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"0"})}),": semaforo eliminado"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"-1"})}),": en caso de error."]}),"\n"]})]}),"\n",(0,r.jsx)(s.h3,{id:"234-ejemplos-de-uso-de-sem\xe1foro-con-hilos",children:"2.3.4. Ejemplos de uso de sem\xe1foro con hilos"}),"\n",(0,r.jsx)(s.h4,{id:"ejemplo-1",children:"Ejemplo 1"}),"\n",(0,r.jsx)(s.p,{children:"Dado el siguiente c\xf3digo:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",metastring:"showLineNumbers",children:'#include <stdio.h>\r\n#include <pthread.h>\r\n#include <semaphore.h>\r\n#define NUMTHREADS 200\r\n#define MAXCNT 10000\r\n\r\n/* Global variables - shared between threads */\r\ndouble counter = 0;\r\n// highlight-start\r\nsem_t sem;\r\n// highlight-end\r\n\r\n/* Declaring functions*/\r\nvoid* counting(void *);\r\n\r\nint main(void) {\r\n  // highlight-start\r\n  pthread_t tid[NUMTHREADS];\r\n  // highlight-end\r\n  int i=0;\r\n\r\n  /* Semaphore init*/\r\n  sem_init(&sem,0,1);\r\n\r\n  for( i=0; i<NUMTHREADS; i++) {\r\n     // highlight-start\r\n     pthread_create(&tid[i], NULL, &counting, NULL);\r\n     // highlight-end\r\n  }\r\n\r\n  for( i=0; i< NUMTHREADS; i++) {\r\n     // highlight-start\r\n     pthread_join(tid[i], NULL);\r\n     // highlight-end\r\n  }\r\n  /* Semaphore destroy*/\r\n  // highlight-start\r\n  sem_destroy(&sem);\r\n  // highlight-end\r\n  printf("\\nCounter must be in: %d\\n", MAXCNT*NUMTHREADS);\r\n  printf("\\nCounter value is: %.0f\\n\\n", counter);\r\n  return 0;\r\n}\r\n\r\n/* Function Thread*/\r\nvoid* counting(void * unused) {\r\n  int i=0;\r\n\r\n  for(i=0; i<MAXCNT; i++){\r\n     // highlight-start\r\n     sem_wait(&sem);\r\n     // highlight-end\r\n     counter++;\r\n     // highlight-start\r\n     sem_post(&sem);\r\n     // highlight-end\r\n  }\r\n\r\n  return NULL;\r\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Preguntas"}),":"]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Investigue el funcionamiento y los par\xe1metros de las funciones ",(0,r.jsx)(s.code,{children:"sem_init"}),", ",(0,r.jsx)(s.code,{children:"sem_wait"}),", ",(0,r.jsx)(s.code,{children:"sem_post"})," y ",(0,r.jsx)(s.code,{children:"sem_destroy"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"\xbfCu\xe1l es la diferencia del presente ejemplo con el anterior?"}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"ejemplo-2",children:"Ejemplo 2"}),"\n",(0,r.jsxs)(s.p,{children:["En el siguiente ejemplo asegura que la tarea ",(0,r.jsx)(s.code,{children:"s1"})," se ejecute antes que ",(0,r.jsx)(s.code,{children:"s2"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",metastring:"showLineNumbers",children:'#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<pthread.h>\r\n#include<semaphore.h>\r\n#define NUMTHREADS 3\r\n\r\n// highlight-start\r\nsem_t synch;\r\n// highlight-end\r\n\r\nvoid *s1(void *arg);\r\nvoid *s2(void *arg);\r\nvoid *s3(void *arg);\r\n\r\nint main(){\r\n  int i;\r\n  // highlight-start\r\n  pthread_t tid[NUMTHREADS];\r\n  // highlight-end\r\n  // highlight-start\r\n  sem_init(&synch,0,0);\r\n \r\n  pthread_create(&tid[0],NULL,&s3,NULL);\r\n  pthread_create(&tid[1],NULL,&s2,NULL);\r\n  pthread_create(&tid[2],NULL,&s1,NULL);\r\n  // highlight-end\r\n \r\n  for( i=0; i< NUMTHREADS; i++){\r\n     // highlight-start\r\n     pthread_join(tid[i], NULL);\r\n     // highlight-end\r\n  }\r\n  \r\n  // highlight-start\r\n  sem_destroy(&synch);\r\n  // highlight-end\r\n  printf("\\nDone !!\\n");\r\n\r\n  return 0;\r\n}\r\n\r\nvoid *s1(void *arg){ \r\n  printf("\\nS1 Executing...\\n");\r\n  // highlight-start\r\n  sem_post(&synch);\r\n  // highlight-end\r\n  return 0;\r\n}\r\n\r\nvoid *s2(void *arg){ \r\n  printf("\\nS2 Waiting...\\n");\r\n  // highlight-start\r\n  sem_wait(&synch);\r\n  // highlight-end\r\n  printf("\\nS2 Executing...\\n");\r\n  return 0;\r\n}\r\n\r\nvoid *s3(void *arg){\r\n  printf("\\nS3 Executing...\\n");\r\n  return 0;\r\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Actividad"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Usando sem\xe1foros como estrategia de sincronizaci\xf3n, modifique el programa anterior con el fin de que siempre se ejecute la tarea ",(0,r.jsx)(s.code,{children:"s2"})," antes que la tarea ",(0,r.jsx)(s.code,{children:"s3"}),". Las tareas se deben ejecutar en el siguiente orden: ",(0,r.jsx)(s.code,{children:"s1"}),", ",(0,r.jsx)(s.code,{children:"s2"}),", ",(0,r.jsx)(s.code,{children:"s3"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"3-comunicaci\xf3n-entre-procesos",children:"3. Comunicaci\xf3n entre procesos"}),"\n",(0,r.jsx)(s.p,{children:"Como es bien sabido los procesos no comparten memoria. Si se desea dise\xf1ar una aplicaci\xf3n colaborativa entre procesos es necesario usar un mecanismo que permita la comunicaci\xf3n entre estos, ya sea memoria compartida o paso de mensajes. A continuaci\xf3n se presenta un ejemplo muy simple del uso de memoria compartida entre procesos."}),"\n",(0,r.jsx)(s.h3,{id:"31-memoria-compartida-en-procesos",children:"3.1. Memoria compartida en procesos"}),"\n",(0,r.jsxs)(s.p,{children:["Se tienen dos procesos denominados el servidor y el cliente, el servidor crea una regi\xf3n de memoria compartida y pone una informaci\xf3n all\xed, luego el cliente se adhiere a esa regi\xf3n lee los datos y se\xf1aliza de manera simple al servidor para que finalice (",(0,r.jsx)(s.a,{href:"https://users.cs.cf.ac.uk/Dave.Marshall/C/node27.html",children:"link"}),")."]}),"\n",(0,r.jsx)(s.h4,{id:"c\xf3digo-del-servidor",children:"C\xf3digo del servidor"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",metastring:"showLineNumbers",children:'#include <sys/types.h>\r\n#include <sys/ipc.h>\r\n#include <sys/shm.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#define SHMSZ 27\r\n\r\nint main(){\r\n  char c;\r\n  int shmid;\r\n  key_t key;\r\n  char *shm, *s;\r\n\r\n  /*Nombre del segmento de memoria compartida = "1234".*/\r\n  key = 1234;\r\n\r\n  /* Se crea el segmento de memoria*/\r\n  if ((shmid = shmget(key, SHMSZ, IPC_CREAT | 0666)) < 0) {\r\n    perror("shmget");\r\n    exit(1);\r\n  }\r\n\r\n  /*El programa se adhiere (attach) al segmento ya creado */\r\n  if ((shm = shmat(shmid, NULL, 0)) == (char *) -1) {\r\n    perror("shmat");\r\n    exit(1);\r\n  }\r\n\r\n  /* Se ponen algunos datos en el segmento para que el proceso cliente los lea */\r\n  s = shm;\r\n  for (c = \'a\'; c <= \'z\'; c++)\r\n    *s++ = c;\r\n\r\n  *s = NULL;\r\n\r\n  /* Por \xfaltimo, se espera a que el proceso cliente cambie el primer caracter de la memoria compartida a \'*\' indicando que ya ley\xf3 la informaci\xf3n */\r\n  while (*shm != \'*\')\r\n    sleep(1);\r\n  \r\n  shmdt(&shm);\r\n  if (shmctl(&shmid, IPC_RMID, 0) == -1)  \r\n \t  fprintf(stderr, "shmctl(IPC_RMID) error\\n");\r\n  else \r\n    printf(" Memoria liberada ");\r\n\r\n  return(0);\r\n}\n'})}),"\n",(0,r.jsx)(s.h4,{id:"c\xf3digo-del-cliente",children:"C\xf3digo del cliente"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",metastring:"showLineNumbers",children:'#include <sys/types.h>\r\n#include <sys/ipc.h>\r\n#include <sys/shm.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#define SHMSZ 27\r\n\r\nvoid main() {\r\n  int shmid;\r\n  key_t key;\r\n  char *shm, *s;\r\n\r\n  /*Se requiere el segmento llamado "1234" creado por el servidor */\r\n  key = 1234;\r\n\r\n  /* Ubica el segmento */\r\n  if ((shmid = shmget(key, SHMSZ, 0666)) < 0) {\r\n    perror("shmget");\r\n    exit(1);\r\n  }\r\n\r\n  /* Se adhiere al segmento para poder hacer uso de \xe9l */\r\n  if ((shm = shmat(shmid, NULL, 0)) == (char *) -1) {\r\n    perror("shmat");\r\n    exit(1);\r\n  }\r\n\r\n  /* Lee lo que el servidor puso en la memoria */\r\n  for (s = shm; *s != NULL; s++)\r\n    putchar(*s);\r\n      \r\n  putchar(\'\\n\');\r\n\r\n  /* Finalmente, cambia el calor del primer car\xe1cter indicando que ha le\xeddo el segmento */\r\n  *shm = \'*\';\r\n\r\n  shmdt(&shm);\r\n  exit(0);\r\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Preguntas"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Consulte el uso de las funciones ",(0,r.jsx)(s.code,{children:"shmget"}),", ",(0,r.jsx)(s.code,{children:"shmat"}),", ",(0,r.jsx)(s.code,{children:"shmdt"})," y ",(0,r.jsx)(s.code,{children:"shmctl"}),". \xbfPara qu\xe9 sirven estas funciones? \xbfQu\xe9 argumentos reciben y para qu\xe9 sirven estos argumentos? \xbfCu\xe1l es la forma tradicional de usar estas funciones?"]}),"\n",(0,r.jsx)(s.li,{children:"Analice el c\xf3digo anterior y verifique el uso y los par\xe1metros pasados a las funciones mencionadas anteriormente."}),"\n",(0,r.jsx)(s.li,{children:"Ejecute ambos programas, primero el servidor en una terminal y luego el cliente en otra terminal. \xbfc\xf3mo es el funcionamiento del programa? \xbfQu\xe9 sucede si ejecuta los programas en un orden diferente (cu\xe1l es la salida en pantalla)?"}),"\n",(0,r.jsxs)(s.li,{children:["El flujo normal para el uso de memoria compartida entre procesos es solicitar la memoria compartida (",(0,r.jsx)(s.code,{children:"shmget"}),"), adherirse a ella(",(0,r.jsx)(s.code,{children:"shmat"}),"), usarla, luego des-adherirse (",(0,r.jsx)(s.code,{children:"shmdt"}),") y por \xfaltimo liberarla (",(0,r.jsx)(s.code,{children:"shmctl"}),"). \xbfTodos los procesos involucrados en la comunicaci\xf3n debe realizar este proceso? \xbfQu\xe9 sucede si un proceso no realiza el proceso de des-adherirse antes de salir o si el proceso principal no libera la memoria antes de salir?"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"4-creaci\xf3n-y-uso-de-sem\xe1foros-con-procesos",children:"4. Creaci\xf3n y uso de sem\xe1foros con procesos"}),"\n",(0,r.jsx)(s.h3,{id:"41-sem\xe1foros-con-nombre",children:"4.1. Sem\xe1foros con nombre"}),"\n",(0,r.jsx)(s.p,{children:"Estos sem\xe1foros son \xfatiles para comunicar procesos que no tienen una relaci\xf3n directa, es decir, cuando los procesos son ejecutados de forma independiente, y para mantener la comunicaci\xf3n entre ellos es necesario declarar un nombre en el sem\xe1foro para que este pueda ser accedido por cualquier proceso. A continuaci\xf3n se presenta el c\xf3digo del problema del Productor/Consumidor."}),"\n",(0,r.jsx)(s.h4,{id:"codigo-del-productor",children:"Codigo del productor"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",metastring:"showLineNumbers",children:'#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <semaphore.h>\r\n#include <sched.h>\r\n#include <sys/stat.h>\r\n#include <fcntl.h>\r\n#include <sys/wait.h>\r\n\r\n#define BUFFER_SIZE 10    // tama\xf1o del buffer\r\n#define CICLOS 10 // numero de ciclos de ejecuci\xf3n\r\n\r\nint buffer[BUFFER_SIZE];\r\nsem_t *sem_cont, *sem_free; // declaramos un puntero para el identificador de los semaforos\r\n\r\nint main (int argc, char *argv[]) {\r\n int i;\r\n pid_t hijo;\r\n int val;\r\n int entrada, salida;    // \xedndices a las zonas de insercion y extraccion del buffer\r\n\r\n entrada = salida = 0; // inicializacion\r\n\r\n printf("Creando semaforos .....\\n");\r\n\r\n /* comprueba si ya existe el semaforo del contador de productos sino lo crea inicializado(0)*/\r\n if((sem_cont = sem_open("/sem_cont", O_CREAT, 0644, 0)) == (sem_t *)-1) {\r\n   perror("Error creando semaforo 1");\r\n }\r\n\r\n /* comprueba si ya existe el semaforo del espacio libre y sino lo crea inicializado (BUFFER_SIZE)*/\r\n if((sem_free = sem_open("/sem_free", O_CREAT, 0644, BUFFER_SIZE)) == (sem_t *)-1) {\r\n   perror("Error creando semaforo 2");\r\n }\r\n\r\n printf("Creando proceso hijo .....\\n");\r\n\r\n hijo = fork() ;\r\n\r\n if (hijo == -1) {\r\n   printf("error creando proceso hijo\\n");\r\n\r\n   sem_unlink("/sem_cont");\r\n   sem_unlink("/sem_free");\r\n\r\n   exit(0);\r\n } else if (hijo == 0) {\r\n   /*estamos en el padre-> productor */\r\n   printf("Soy el padre (productor) con PID:%d\\n", getpid());\r\n   sleep(1);\r\n\r\n   for (i = 0; i <= CICLOS; i++) {\r\n     sem_wait(sem_free); /* espera que haya espacio en el buffer y decrementa */\r\n     buffer[entrada] = i; // produce un elemento\r\n     entrada = (entrada + 1) % BUFFER_SIZE; // buffer circular\r\n     sem_post(sem_cont); /* incrementa el contador del sem\xe1foro */\r\n     sem_getvalue(sem_cont, &val); // valor del contador del sem\xe1foro\r\n     printf("Soy el Productor: entrada=%d, Estado %d productos\\n", entrada, val);\r\n     sleep(1);\r\n   }\r\n\r\n   /* libero sem\xe1foros */\r\n   sem_close(sem_cont);\r\n   sem_close(sem_free);\r\n\r\n   exit(0);\r\n }\r\n\r\n printf("Soy el padre espero que termine el hijo .....\\n");\r\n\r\n wait(0); /* Esperar que acabe el hijo */\r\n\r\n printf("Soy el padre destruyo los semaforos y termino.....\\n");\r\n\r\n sem_unlink("/sem_cont");\r\n sem_unlink("/sem_free");\r\n\r\n exit(0);\r\n}\n'})}),"\n",(0,r.jsx)(s.h4,{id:"codigo-del-consumidor",children:"Codigo del consumidor"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",metastring:"showLineNumbers",children:'#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <semaphore.h>\r\n#include <sched.h> \r\n#include <sys/stat.h>\r\n#include <fcntl.h>\r\n#include <sys/wait.h>\r\n\r\n#define BUFFER_SIZE 10    // tama\xf1o del buffer\r\n#define CICLOS 10 // numero de ciclos de ejecuci\xf3n\r\n\r\nint buffer[BUFFER_SIZE];\r\nsem_t *sem_cont, *sem_free; // declaramos un puntero para el identificador de los semaforos\r\n\r\nint main (int argc, char *argv[]) {\r\n int i;\r\n pid_t hijo;\r\n int val;\r\n int entrada, salida;    // \xedndices a las zonas de insercion y extraccion del buffer\r\n\r\n entrada = salida = 0; // inicializacion\r\n\r\n printf("Creando semaforos .....\\n");\r\n\r\n /* comprueba si ya existe el semaforo del contador de productos sino lo crea inicializado(0)*/\r\n if((sem_cont = sem_open("/sem_cont", O_CREAT, 0644, 0)) == (sem_t *)-1) {\r\n   perror("Error creando semaforo 1");\r\n }\r\n\r\n /* comprueba si ya existe el semaforo del espacio libre y sino lo crea inicializado (BUFFER_SIZE)*/\r\n if((sem_free = sem_open("/sem_free", O_CREAT, 0644, BUFFER_SIZE)) == (sem_t *)-1) {\r\n   perror("Error creando semaforo 2");\r\n }\r\n\r\n printf("Creando proceso hijo .....\\n");\r\n\r\n hijo = fork();\r\n\r\n if (hijo == -1) {\r\n   printf("error creando proceso hijo\\n");\r\n\r\n   sem_close(sem_cont);\r\n   sem_close(sem_free);\r\n  \r\n   exit(0);\r\n } else if (hijo == 0) {\r\n   printf("Soy el hijo (consumidor) con PID:%d\\n", getpid());\r\n  \r\n   sleep(1);\r\n\r\n   for (i = 0; i <= CICLOS; i++) {\r\n     sem_wait(sem_cont); /* espera que haya datos en el buffer (contador>0) y decrementa */\r\n     buffer[salida] = 0; // consume un elemento\r\n     salida= (salida+1) % BUFFER_SIZE; // buffer circular\r\n     sem_post(sem_free); /* incrementa el contador de espacio */\r\n     sem_getvalue(sem_cont, &val); // valor del contador del sem\xe1foro\r\n     printf("Soy el Consumidor: salida=%d, Estado %d productos\\n", salida, val); \r\n     sleep(2);\r\n   }\r\n\r\n   exit(0);\r\n }\r\n\r\n wait(0);\r\n\r\n /* libero sem\xe1foros */\r\n sem_close(sem_cont);\r\n sem_close(sem_free);\r\n\r\n printf("Soy el hijo y termino.....\\n");\r\n\r\n exit(0);\r\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"42-sem\xe1foros-sin-nombre",children:"4.2. Sem\xe1foros sin nombre"}),"\n",(0,r.jsx)(s.p,{children:"Estos sem\xe1foros son usados cuando se necesita comunicarse entre procesos creados por el mismo padre, por lo tanto no se requiere el uso de un nombre para ser accedido a ellos."}),"\n",(0,r.jsx)(s.h4,{id:"ejemplo",children:"Ejemplo"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c",children:'#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <semaphore.h>\r\n#include <unistd.h>\r\n#include <pthread.h>\r\n#include <sys/types.h>\r\n#include <sys/wait.h>\r\n#include <sys/stat.h>\r\n#include <sys/mman.h>\r\n\r\n#define NUMHIJOS 3\r\n\r\nsem_t *sem1;\r\n\r\nvoid s1();\r\nvoid s2();\r\nvoid s3();\r\n\r\nint main(){\r\n  int i;\r\n  pid_t pid[NUMHIJOS];\r\n  int val= 0;\r\n  int    pid_hijo =0;\r\n\r\n  sem1 = mmap(0, sizeof(sem_t), PROT_READ|PROT_WRITE, MAP_SHARED|MAP_ANONYMOUS, -1, 0);\r\n\r\n  sem_init(sem1,1,0); //direccion de la variable, 0->hilos y diferente de 0->procesos, valor de inicializacion del semaforo.\r\n\r\n  for (i = 0; i < NUMHIJOS; i++) {\r\n     pid[i] = fork();//Crea los procesos y los guarda en un arreglo\r\n\r\n     if (pid[i] == -1) {\r\n        /* Verificacion de Error */\r\n        printf("No fue posible crear un hijo\\n");\r\n        return -1;\r\n     }\r\n\r\n     if (pid[i] == 0) {\r\n        //printf("\\nSoy un proceso hijo con PID: %d!\\n", getpid());\r\n          switch (i){\r\n           case 0:\r\n              s3();\r\n           break;\r\n\r\n           case 1:\r\n              s2();\r\n           break;\r\n\r\n           case 2:\r\n              s1();\r\n           break;\r\n          }\r\n        printf("El proceso hijo con PID %d ha terminado!\\n", getpid());\r\n        exit(0);\r\n     }\r\n  }\r\n\r\n  for (i = 0; i < NUMHIJOS; i++) {\r\n     wait(&val);\r\n  }\r\n\r\n  sem_destroy(sem1);\r\n\r\n  printf("\\nEl padre termino !!\\n"); //mensaje al final\r\n  return 0;\r\n}\r\n\r\nvoid s1(){\r\n  printf("\\nS1 Executing...\\n");\r\n  sem_post(sem1);\r\n}\r\n\r\nvoid s2(){\r\n  sem_wait(sem1);//ejecuta primero el S1\r\n  printf("\\nS2 Executing...\\n");\r\n}\r\n\r\nvoid s3(){\r\n  printf("\\nS3 Executing...\\n");\r\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"5-ejercicios-propuestos",children:"5. Ejercicios propuestos"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Realice la implementaci\xf3n del problema del barbero dormil\xf3n en usando solo sem\xe1foros."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Genere un deadlock o interbloqueo en el problema del productor consumidor con los sem\xe1foros."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Medida de Dispersi\xf3n"}),": el profesor de un curso desea un programa en lenguaje C que calcule la desviaci\xf3n est\xe1ndar (s\xedmbolo ",(0,r.jsx)(s.strong,{children:(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsx)(s.mrow,{children:(0,r.jsx)(s.mi,{children:"\u03c3"})}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"\\sigma"})]})})}),(0,r.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c3"})]})})]})})," o ",(0,r.jsx)(s.strong,{children:(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsx)(s.mrow,{children:(0,r.jsx)(s.mi,{children:"s"})}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"s"})]})})}),(0,r.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",children:"s"})]})})]})}),") de las notas obtenidas por sus estudiantes en el curso."]}),"\n",(0,r.jsx)(s.span,{className:"katex-display",children:(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsxs)(s.mover,{accent:"true",children:[(0,r.jsx)(s.mi,{children:"x"}),(0,r.jsx)(s.mo,{stretchy:"true",children:"\u203e"})]}),(0,r.jsx)(s.mo,{children:"="}),(0,r.jsxs)(s.mfrac,{children:[(0,r.jsx)(s.mn,{children:"1"}),(0,r.jsx)(s.mi,{children:"N"})]}),(0,r.jsxs)(s.munderover,{children:[(0,r.jsx)(s.mo,{children:"\u2211"}),(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"i"}),(0,r.jsx)(s.mo,{children:"="}),(0,r.jsx)(s.mn,{children:"1"})]}),(0,r.jsx)(s.mi,{children:"N"})]}),(0,r.jsxs)(s.msub,{children:[(0,r.jsx)(s.mi,{children:"x"}),(0,r.jsx)(s.mi,{children:"i"})]})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"\\overline{x}=\\frac{1}{N}\\sum_{i=1}^{N}x_{i}"})]})})}),(0,r.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.6306em"}}),(0,r.jsx)(s.span,{className:"mord overline",children:(0,r.jsx)(s.span,{className:"vlist-t",children:(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsxs)(s.span,{className:"vlist",style:{height:"0.6306em"},children:[(0,r.jsxs)(s.span,{style:{top:"-3em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(s.span,{className:"mord",children:(0,r.jsx)(s.span,{className:"mord mathnormal",children:"x"})})]}),(0,r.jsxs)(s.span,{style:{top:"-3.5506em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(s.span,{className:"overline-line",style:{borderBottomWidth:"0.04em"}})]})]})})})}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(s.span,{className:"mrel",children:"="}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"3.106em",verticalAlign:"-1.2777em"}}),(0,r.jsxs)(s.span,{className:"mord",children:[(0,r.jsx)(s.span,{className:"mopen nulldelimiter"}),(0,r.jsx)(s.span,{className:"mfrac",children:(0,r.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(s.span,{className:"vlist-r",children:[(0,r.jsxs)(s.span,{className:"vlist",style:{height:"1.3214em"},children:[(0,r.jsxs)(s.span,{style:{top:"-2.314em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(s.span,{className:"mord",children:(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"})})]}),(0,r.jsxs)(s.span,{style:{top:"-3.23em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(s.span,{className:"frac-line",style:{borderBottomWidth:"0.04em"}})]}),(0,r.jsxs)(s.span,{style:{top:"-3.677em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(s.span,{className:"mord",children:(0,r.jsx)(s.span,{className:"mord",children:"1"})})]})]}),(0,r.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsx)(s.span,{className:"vlist",style:{height:"0.686em"},children:(0,r.jsx)(s.span,{})})})]})}),(0,r.jsx)(s.span,{className:"mclose nulldelimiter"})]}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(s.span,{className:"mop op-limits",children:(0,r.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(s.span,{className:"vlist-r",children:[(0,r.jsxs)(s.span,{className:"vlist",style:{height:"1.8283em"},children:[(0,r.jsxs)(s.span,{style:{top:"-1.8723em",marginLeft:"0em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3.05em"}}),(0,r.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsxs)(s.span,{className:"mord mtight",children:[(0,r.jsx)(s.span,{className:"mord mathnormal mtight",children:"i"}),(0,r.jsx)(s.span,{className:"mrel mtight",children:"="}),(0,r.jsx)(s.span,{className:"mord mtight",children:"1"})]})})]}),(0,r.jsxs)(s.span,{style:{top:"-3.05em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3.05em"}}),(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{className:"mop op-symbol large-op",children:"\u2211"})})]}),(0,r.jsxs)(s.span,{style:{top:"-4.3em",marginLeft:"0em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3.05em"}}),(0,r.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(s.span,{className:"mord mtight",children:(0,r.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.10903em"},children:"N"})})})]})]}),(0,r.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsx)(s.span,{className:"vlist",style:{height:"1.2777em"},children:(0,r.jsx)(s.span,{})})})]})}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsxs)(s.span,{className:"mord",children:[(0,r.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,r.jsx)(s.span,{className:"msupsub",children:(0,r.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(s.span,{className:"vlist-r",children:[(0,r.jsx)(s.span,{className:"vlist",style:{height:"0.3117em"},children:(0,r.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(s.span,{className:"mord mtight",children:(0,r.jsx)(s.span,{className:"mord mathnormal mtight",children:"i"})})})]})}),(0,r.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,r.jsx)(s.span,{})})})]})})]})]})]})]})}),"\n",(0,r.jsx)(s.span,{className:"katex-display",children:(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"\u03c3"}),(0,r.jsx)(s.mo,{children:"="}),(0,r.jsx)(s.msqrt,{children:(0,r.jsxs)(s.mrow,{children:[(0,r.jsxs)(s.mfrac,{children:[(0,r.jsx)(s.mn,{children:"1"}),(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"N"}),(0,r.jsx)(s.mo,{children:"\u2212"}),(0,r.jsx)(s.mn,{children:"1"})]})]}),(0,r.jsxs)(s.munderover,{children:[(0,r.jsx)(s.mo,{children:"\u2211"}),(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"i"}),(0,r.jsx)(s.mo,{children:"="}),(0,r.jsx)(s.mn,{children:"1"})]}),(0,r.jsx)(s.mi,{children:"N"})]}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsxs)(s.msub,{children:[(0,r.jsx)(s.mi,{children:"x"}),(0,r.jsx)(s.mi,{children:"i"})]}),(0,r.jsx)(s.mo,{children:"\u2212"}),(0,r.jsxs)(s.mover,{accent:"true",children:[(0,r.jsx)(s.mi,{children:"x"}),(0,r.jsx)(s.mo,{stretchy:"true",children:"\u203e"})]}),(0,r.jsxs)(s.msup,{children:[(0,r.jsx)(s.mo,{stretchy:"false",children:")"}),(0,r.jsx)(s.mn,{children:"2"})]})]})})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"\\sigma=\\sqrt{\\frac{1}{N-1}\\sum_{i=1}^{N}(x_{i}-\\overline{x})^2}"})]})})}),(0,r.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c3"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(s.span,{className:"mrel",children:"="}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"3.3338em",verticalAlign:"-1.2777em"}}),(0,r.jsx)(s.span,{className:"mord sqrt",children:(0,r.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(s.span,{className:"vlist-r",children:[(0,r.jsxs)(s.span,{className:"vlist",style:{height:"2.0561em"},children:[(0,r.jsxs)(s.span,{className:"svg-align",style:{top:"-5.2938em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"5.2938em"}}),(0,r.jsxs)(s.span,{className:"mord",style:{paddingLeft:"1.056em"},children:[(0,r.jsxs)(s.span,{className:"mord",children:[(0,r.jsx)(s.span,{className:"mopen nulldelimiter"}),(0,r.jsx)(s.span,{className:"mfrac",children:(0,r.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(s.span,{className:"vlist-r",children:[(0,r.jsxs)(s.span,{className:"vlist",style:{height:"1.3214em"},children:[(0,r.jsxs)(s.span,{style:{top:"-2.314em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsxs)(s.span,{className:"mord",children:[(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(s.span,{className:"mbin",children:"\u2212"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(s.span,{className:"mord",children:"1"})]})]}),(0,r.jsxs)(s.span,{style:{top:"-3.23em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(s.span,{className:"frac-line",style:{borderBottomWidth:"0.04em"}})]}),(0,r.jsxs)(s.span,{style:{top:"-3.677em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(s.span,{className:"mord",children:(0,r.jsx)(s.span,{className:"mord",children:"1"})})]})]}),(0,r.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsx)(s.span,{className:"vlist",style:{height:"0.7693em"},children:(0,r.jsx)(s.span,{})})})]})}),(0,r.jsx)(s.span,{className:"mclose nulldelimiter"})]}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(s.span,{className:"mop op-limits",children:(0,r.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(s.span,{className:"vlist-r",children:[(0,r.jsxs)(s.span,{className:"vlist",style:{height:"1.8283em"},children:[(0,r.jsxs)(s.span,{style:{top:"-1.8723em",marginLeft:"0em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3.05em"}}),(0,r.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsxs)(s.span,{className:"mord mtight",children:[(0,r.jsx)(s.span,{className:"mord mathnormal mtight",children:"i"}),(0,r.jsx)(s.span,{className:"mrel mtight",children:"="}),(0,r.jsx)(s.span,{className:"mord mtight",children:"1"})]})})]}),(0,r.jsxs)(s.span,{style:{top:"-3.05em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3.05em"}}),(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{className:"mop op-symbol large-op",children:"\u2211"})})]}),(0,r.jsxs)(s.span,{style:{top:"-4.3em",marginLeft:"0em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3.05em"}}),(0,r.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(s.span,{className:"mord mtight",children:(0,r.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.10903em"},children:"N"})})})]})]}),(0,r.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsx)(s.span,{className:"vlist",style:{height:"1.2777em"},children:(0,r.jsx)(s.span,{})})})]})}),(0,r.jsx)(s.span,{className:"mopen",children:"("}),(0,r.jsxs)(s.span,{className:"mord",children:[(0,r.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,r.jsx)(s.span,{className:"msupsub",children:(0,r.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(s.span,{className:"vlist-r",children:[(0,r.jsx)(s.span,{className:"vlist",style:{height:"0.3117em"},children:(0,r.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(s.span,{className:"mord mtight",children:(0,r.jsx)(s.span,{className:"mord mathnormal mtight",children:"i"})})})]})}),(0,r.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,r.jsx)(s.span,{})})})]})})]}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(s.span,{className:"mbin",children:"\u2212"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(s.span,{className:"mord overline",children:(0,r.jsx)(s.span,{className:"vlist-t",children:(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsxs)(s.span,{className:"vlist",style:{height:"0.6306em"},children:[(0,r.jsxs)(s.span,{style:{top:"-3em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(s.span,{className:"mord",children:(0,r.jsx)(s.span,{className:"mord mathnormal",children:"x"})})]}),(0,r.jsxs)(s.span,{style:{top:"-3.5506em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(s.span,{className:"overline-line",style:{borderBottomWidth:"0.04em"}})]})]})})})}),(0,r.jsxs)(s.span,{className:"mclose",children:[(0,r.jsx)(s.span,{className:"mclose",children:")"}),(0,r.jsx)(s.span,{className:"msupsub",children:(0,r.jsx)(s.span,{className:"vlist-t",children:(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsx)(s.span,{className:"vlist",style:{height:"0.7401em"},children:(0,r.jsxs)(s.span,{style:{top:"-2.989em",marginRight:"0.05em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(s.span,{className:"mord mtight",children:"2"})})]})})})})})]})]})]}),(0,r.jsxs)(s.span,{style:{top:"-4.0161em"},children:[(0,r.jsx)(s.span,{className:"pstrut",style:{height:"5.2938em"}}),(0,r.jsx)(s.span,{className:"hide-tail",style:{minWidth:"0.742em",height:"3.3738em"},children:(0,r.jsx)(s.svg,{xmlns:"http://www.w3.org/2000/svg",width:"400em",height:"3.3738em",viewBox:"0 0 400000 3373",preserveAspectRatio:"xMinYMin slice",children:(0,r.jsx)(s.path,{d:"M702 80H40000040\nH742v3239l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 80H400000v40H742z"})})})]})]}),(0,r.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(s.span,{className:"vlist-r",children:(0,r.jsx)(s.span,{className:"vlist",style:{height:"1.2777em"},children:(0,r.jsx)(s.span,{})})})]})})]})]})]})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Requisitos"}),":"]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"El n\xfamero de notas es variable (se debe usar memoria din\xe1mica)."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["El programa debe crear tantos hilos como se especifique en el par\xe1metro de entrada ",(0,r.jsx)(s.code,{children:"cantidad_hilos"}),", se debe ejecutar as\xed:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"$./nombre_ejecutable fichero_notas.csv\n"})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"El programa debe utilizar 2 hilos, uno que calcule el promedio y otro que calcule la desviaci\xf3n est\xe1ndar"}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Plantee una estrategia usando sem\xe1foros y/o mutex para asegurar primero se calcule el promedio antes de iniciar a calcular la desviaci\xf3n est\xe1ndar. La creaci\xf3n de los hilos se debe realizar desde el main, todos deben de crearse sin ninguna restricci\xf3n."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h1,{id:"7-referencias",children:"7. Referencias"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://bigdata-guide.blogspot.com/2014/01/what-is-race-condition.html",children:"https://bigdata-guide.blogspot.com/2014/01/what-is-race-condition.html"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://thesaurus.plus/thesaurus/race_condition",children:"https://thesaurus.plus/thesaurus/race_condition"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://preshing.com/20150316/semaphores-are-surprisingly-versatile/",children:"https://preshing.com/20150316/semaphores-are-surprisingly-versatile/"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://users.cs.cf.ac.uk/Dave.Marshall/C/node27.html",children:"https://users.cs.cf.ac.uk/Dave.Marshall/C/node27.html"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://github.com/hailinzeng/Programming-POSIX-Threads",children:"https://github.com/hailinzeng/Programming-POSIX-Threads"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://github.com/yesoun/Message-Passing-Threads",children:"https://github.com/yesoun/Message-Passing-Threads"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.cs.helsinki.fi/u/kerola/rio/pdf/lu06_v.pdf",children:"https://www.cs.helsinki.fi/u/kerola/rio/pdf/lu06_v.pdf"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.csl.mtu.edu/cs4411.choi/www/Resource/Semaphore.pdf",children:"https://www.csl.mtu.edu/cs4411.choi/www/Resource/Semaphore.pdf"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.cs.princeton.edu/courses/archive/fall11/cos318/lectures/L8_SemaphoreMonitor_v2.pdf",children:"https://www.cs.princeton.edu/courses/archive/fall11/cos318/lectures/L8_SemaphoreMonitor_v2.pdf"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"http://www.csc.villanova.edu/~mdamian/threads/posixsem.html",children:"http://www.csc.villanova.edu/~mdamian/threads/posixsem.html"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://cw.fel.cvut.cz/b241/courses/be5b33rpz/start",children:"https://cw.fel.cvut.cz/b241/courses/be5b33rpz/start"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://cw.fel.cvut.cz/b191/_media/courses/pag/cpp_threads_1.pdf",children:"https://cw.fel.cvut.cz/b191/_media/courses/pag/cpp_threads_1.pdf"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://jvns.ca/teach-tech-with-cartoons/",children:"https://jvns.ca/teach-tech-with-cartoons/"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.cs.princeton.edu/courses/archive/fall11/cos318/",children:"https://www.cs.princeton.edu/courses/archive/fall11/cos318/"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://medium.com/geekculture/processes-threads-deadlock-semaphores-and-more-f70be5395ef6",children:"https://medium.com/geekculture/processes-threads-deadlock-semaphores-and-more-f70be5395ef6"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.csl.mtu.edu/cs4411.choi/www/",children:"https://www.csl.mtu.edu/cs4411.choi/www/"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.digikey.com/en/maker/projects/introduction-to-rtos-solution-to-part-7-freertos-semaphore-example/51aa8660524c4daba38cba7c2f5baba7",children:"https://www.digikey.com/en/maker/projects/introduction-to-rtos-solution-to-part-7-freertos-semaphore-example/51aa8660524c4daba38cba7c2f5baba7"})}),"\n"]})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},4960:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/acceso-mutex-8c5f92444e0d14efffa95db9e0df83f4.png"},6667:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/mutex-0f86f4fbf92a8d95bcdd931557aab590.png"},9311:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/race-condition-4469aa8d7c165d3760235819b3b281f7.png"}}]);